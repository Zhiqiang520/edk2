// Copyright (c) 2020 Intel Corporation
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
#![cfg_attr(not(test), no_std)]

#[cfg(not(test))]
use r_efi::efi;

//GlobalAlloc and alloc_error_handler installed by efi_services
#[cfg(not(test))]
use efi_services;

#[cfg(not(test))]
extern crate alloc;
#[cfg(not(test))]
use alloc::vec::Vec;

#[cfg(not(test))]
#[panic_handler]
fn panic_handler(panic_info: &core::panic::PanicInfo) -> ! {
    loop {}
}

pub const SIGNATURE_EXP: [u8; 256] = [
0xb3, 0xc1, 0x56, 0x9a, 0x89, 0xf9, 0x96, 0xdc, 0xb5, 0xf5, 0xcc, 0xa3, 0xc8, 0x41, 0x6a, 0xca,
0x9f, 0xcf, 0x55, 0x68, 0x71, 0xad, 0x37, 0x5c, 0xe5, 0x8c, 0xc2, 0xf8, 0x80, 0xc6, 0xde, 0x42,
0x82, 0x4b, 0x24, 0x3b, 0xbd, 0x0a, 0xbb, 0x29, 0x04, 0x1b, 0xee, 0x1a, 0xb1, 0x1e, 0xc0, 0x8f,
0x64, 0x9e, 0x57, 0x5d, 0xd6, 0x24, 0x35, 0xd3, 0xa8, 0x7a, 0xe9, 0xb8, 0xb1, 0x2e, 0x99, 0x18,
0xc3, 0x9a, 0x65, 0x12, 0xb6, 0xbf, 0x73, 0xdf, 0xcf, 0x54, 0xf3, 0xb5, 0xd1, 0xc0, 0xd9, 0x3a,
0xff, 0x8d, 0xc7, 0x62, 0x2f, 0x37, 0x18, 0x9a, 0x6b, 0xb3, 0x53, 0x04, 0xe2, 0xd8, 0x99, 0x8a,
0xe0, 0xc8, 0xc5, 0x4f, 0x79, 0x19, 0x89, 0x42, 0x1b, 0x50, 0x72, 0xe8, 0x10, 0x5a, 0xb1, 0xac,
0x85, 0x85, 0x74, 0x1a, 0x59, 0x51, 0x47, 0x1d, 0x7e, 0xa3, 0x67, 0xdf, 0x65, 0xd1, 0x31, 0x2b,
0x97, 0xc1, 0xba, 0xde, 0xa2, 0xf9, 0xca, 0xd0, 0x6f, 0xc5, 0x45, 0x98, 0x20, 0x40, 0x0d, 0x45,
0x5c, 0x2f, 0x1c, 0xab, 0x35, 0x80, 0x99, 0x93, 0x31, 0x59, 0x8e, 0x4d, 0xa0, 0x35, 0x34, 0x21,
0x77, 0x9d, 0xc4, 0xea, 0xc2, 0xf1, 0x86, 0x62, 0x0c, 0x16, 0xdd, 0x49, 0x35, 0xbb, 0x06, 0xa5,
0x6f, 0x5d, 0x5c, 0x11, 0x36, 0xe1, 0x97, 0x85, 0x90, 0x1f, 0x23, 0x4b, 0xc7, 0x73, 0x7e, 0x23,
0x02, 0x46, 0x10, 0x87, 0xb8, 0x8c, 0x79, 0x3d, 0x29, 0xd5, 0x29, 0x24, 0x98, 0xf9, 0x40, 0x13,
0x9d, 0x18, 0x3a, 0xf9, 0x12, 0x00, 0x05, 0x2f, 0xaf, 0x1b, 0xd3, 0xd2, 0x8e, 0x38, 0xb5, 0xce,
0x44, 0x1c, 0xa2, 0x9d, 0x4e, 0x89, 0x78, 0xa1, 0x2b, 0x6d, 0x09, 0x43, 0xd6, 0x59, 0xad, 0x70,
0xe6, 0x02, 0x93, 0xe0, 0xd7, 0x1f, 0x1b, 0x9d, 0x36, 0x1b, 0xd2, 0x73, 0x1b, 0x6e, 0x31, 0xe8,
];

#[cfg(not(test))]
mod rsa_data;
#[cfg(not(test))]
use ring::signature::{self, RsaEncoding, VerificationAlgorithm};
#[cfg(not(test))]
fn test_rsa_verify(padding_alg: &'static dyn RsaEncoding, algorithm: &'static dyn VerificationAlgorithm) {
    // openssl.exe genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:65537 -outform DER > private.der
    //let key_bytes_der = untrusted::Input::from(&rsa_data::PRIVATE_DER).as_slice_less_safe();
    //let key_pair: signature::RsaKeyPair = signature::RsaKeyPair::from_der(key_bytes_der).unwrap();
    const MESSAGE: &'static [u8] = b"hello, world";
    //let mut sign = [0u8;256];

    //log::info!("Test - sign: \n");
    //for i in 0..256 {
    //    log::info!("{:02x} ", sign[i])
    //}
    //log::info!("\n");
 
    // Verify the signature.
    // openssl.exe rsa -inform DER -in private.der -outform DER -RSAPublicKey_out > public.der
    let public_key_bytes_der = untrusted::Input::from(&rsa_data::PUBLIC_DER).as_slice_less_safe();
    let pubkey = signature::UnparsedPublicKey::new(algorithm, public_key_bytes_der);
    pubkey.verify(&MESSAGE, &SIGNATURE_EXP).unwrap();
}
#[cfg(not(test))]
#[export_name = "test_rsa"]
fn test_rsa() {
    // PKCS#1 1.5 padding using SHA-256 for RSA signatures.
    test_rsa_verify(&signature::RSA_PKCS1_SHA256, &signature::RSA_PKCS1_2048_8192_SHA256);
}

#[cfg(not(test))]
#[no_mangle]
#[export_name = "UEFI_Main"]
pub extern fn main(_h: efi::Handle, st: *mut efi::SystemTable) -> efi::Status {
    unsafe { efi_services::init(_h, st); }

    test_rsa();

    efi::Status::SUCCESS
}

