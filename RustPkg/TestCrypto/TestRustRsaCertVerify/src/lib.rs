// Copyright (c) 2020 Intel Corporation
//
// SPDX-License-Identifier: BSD-2-Clause-Patent
#![cfg_attr(not(test), no_std)]

#[cfg(not(test))]
use r_efi::efi;

//GlobalAlloc and alloc_error_handler installed by efi_services
#[cfg(not(test))]
use efi_services;

#[cfg(not(test))]
extern crate alloc;
#[cfg(not(test))]
use alloc::vec::Vec;

#[cfg(not(test))]
#[panic_handler]
fn panic_handler(panic_info: &core::panic::PanicInfo) -> ! {
    loop {}
}

#[cfg(not(test))]
use ring::signature::{self, RsaEncoding, VerificationAlgorithm};

#[cfg(not(test))]
mod pki_data;

pub const SIGNATURE_DATA: [u8; 512] = [
0x37, 0x5c, 0x9d, 0x8d, 0x80, 0xf2, 0x8a, 0x87, 0x50, 0xcb, 0xb6, 0x04, 0x20, 0x78, 0x95, 0xd2,
0xd3, 0x0a, 0x37, 0x15, 0x19, 0x5b, 0x7f, 0x5c, 0xc0, 0xf0, 0x1d, 0x6e, 0xdb, 0xba, 0xc4, 0x37,
0xcf, 0xe2, 0xdf, 0xe3, 0x24, 0x01, 0xb0, 0x95, 0x73, 0x90, 0x0b, 0x08, 0x15, 0x24, 0x87, 0x73,
0x25, 0x80, 0xfc, 0x0d, 0x97, 0xa4, 0x28, 0xce, 0x7e, 0x93, 0xf3, 0x77, 0x8d, 0x1f, 0x14, 0xb3,
0xd3, 0x5f, 0x7b, 0xbb, 0x85, 0x83, 0xb2, 0xcb, 0xfd, 0x8e, 0x64, 0xeb, 0x85, 0x78, 0xb2, 0xbb,
0xad, 0xf9, 0x25, 0xbe, 0xc6, 0xbf, 0xdc, 0x87, 0xc9, 0x6a, 0xa8, 0x7a, 0xa5, 0x09, 0x92, 0xfe,
0xe0, 0x02, 0x52, 0xd9, 0xd2, 0x7c, 0x03, 0x3d, 0x47, 0xd8, 0x4e, 0x3c, 0x09, 0xf2, 0xaa, 0xe9,
0xd8, 0x6a, 0x11, 0x43, 0x4d, 0x03, 0x95, 0xb8, 0xe7, 0x04, 0xb4, 0x63, 0x42, 0xce, 0xf9, 0x6a,
0x53, 0x2c, 0x95, 0xdf, 0x6d, 0x51, 0xb9, 0x06, 0x2a, 0x54, 0x60, 0x95, 0xa1, 0x50, 0x2f, 0x99,
0xb7, 0x4e, 0x40, 0xb2, 0x59, 0x4a, 0x8e, 0xda, 0xf4, 0xf6, 0xd7, 0xd3, 0x41, 0x0f, 0x65, 0xda,
0xbd, 0xe9, 0xc8, 0x86, 0x82, 0x1e, 0xc4, 0xc2, 0xc3, 0x41, 0xb5, 0x2c, 0x6a, 0x20, 0x10, 0x8d,
0x73, 0x16, 0x26, 0x64, 0x4c, 0x68, 0x51, 0x3c, 0xbf, 0x77, 0x7c, 0xfe, 0x67, 0x55, 0xb2, 0x0e,
0x76, 0xcd, 0x31, 0xef, 0x69, 0xc7, 0xad, 0x55, 0x21, 0x60, 0x4b, 0x0a, 0x7c, 0xc4, 0x78, 0x2e,
0x78, 0x59, 0xa6, 0xe1, 0xb4, 0x16, 0x39, 0x17, 0x66, 0x84, 0x34, 0xba, 0xc3, 0x31, 0x7f, 0x22,
0x13, 0x1a, 0x7f, 0x2a, 0x71, 0x31, 0xd6, 0x1f, 0x78, 0x33, 0x74, 0xc4, 0x7b, 0xae, 0x80, 0x53,
0xd8, 0xa1, 0x46, 0x92, 0xd6, 0xfc, 0x23, 0xa5, 0x7d, 0x28, 0x36, 0xba, 0x71, 0xc6, 0xd8, 0x4c,
0x2c, 0xd0, 0x44, 0x6d, 0xb0, 0x3a, 0xee, 0xc3, 0x36, 0x71, 0x90, 0xbe, 0xc2, 0x01, 0xf1, 0xd4,
0xcc, 0x01, 0x3e, 0x3d, 0x87, 0x4e, 0x57, 0x8b, 0x56, 0x35, 0xce, 0xed, 0x88, 0x93, 0x9f, 0xc6,
0xaf, 0x51, 0x99, 0xbc, 0x1c, 0x4f, 0xf1, 0xd5, 0x92, 0x9a, 0x3b, 0x7e, 0x71, 0x17, 0xda, 0x4a,
0x4f, 0xf8, 0x0d, 0x26, 0x2e, 0x17, 0x00, 0xa9, 0x7e, 0xdc, 0x93, 0x15, 0x3a, 0x30, 0xb1, 0xcc,
0x20, 0xcb, 0x36, 0x90, 0xbe, 0x14, 0xa4, 0x8d, 0x48, 0x70, 0x7d, 0xca, 0x02, 0xc2, 0xf0, 0xa3,
0x9f, 0x67, 0xc9, 0xcc, 0x8d, 0x32, 0x43, 0x36, 0x6c, 0x23, 0x27, 0x2d, 0x14, 0xcc, 0xa5, 0xe1,
0x42, 0xaf, 0xe2, 0xa2, 0x18, 0x72, 0x10, 0xdf, 0xdf, 0x4e, 0x79, 0x68, 0x20, 0x72, 0x96, 0xfa,
0x0c, 0xc9, 0x6b, 0x32, 0x58, 0x5d, 0x0a, 0xfa, 0x33, 0x4b, 0xb9, 0xec, 0x93, 0x53, 0x8d, 0x6c,
0xef, 0x3c, 0xd6, 0xd5, 0x70, 0x1e, 0x38, 0xb7, 0x16, 0x20, 0x3c, 0x6f, 0xaf, 0x49, 0x65, 0xac,
0xc6, 0x44, 0xc2, 0xd2, 0x02, 0x82, 0x78, 0x1c, 0x97, 0x00, 0x92, 0x07, 0x27, 0x6b, 0xe9, 0x3f,
0xed, 0xf7, 0x8a, 0x38, 0xab, 0x07, 0xd2, 0xfa, 0xb1, 0x01, 0xb9, 0xdf, 0x6c, 0xc7, 0x07, 0x02,
0x68, 0x08, 0xc5, 0xb4, 0x4b, 0x5b, 0xd1, 0x3d, 0x44, 0xf0, 0x5d, 0x7f, 0xcf, 0x45, 0x0f, 0x23,
0x46, 0x88, 0x72, 0x9e, 0xf6, 0xed, 0xde, 0xc3, 0x8e, 0xeb, 0xad, 0x00, 0xac, 0xfd, 0x79, 0x18,
0xee, 0x2d, 0x2e, 0xd4, 0x0d, 0x96, 0x40, 0x99, 0x45, 0xdf, 0x2d, 0x76, 0xa5, 0xa6, 0xae, 0xea,
0x0d, 0x73, 0xf8, 0x2c, 0x30, 0x9b, 0x59, 0x15, 0xa1, 0x5d, 0x75, 0x24, 0xe2, 0xf9, 0x54, 0x01,
0x7a, 0x9b, 0xc5, 0xec, 0x96, 0x44, 0x6c, 0x3e, 0x8d, 0xa4, 0xd6, 0xe6, 0x7f, 0x8f, 0xfa, 0x08
];

const MESSAGE: &'static [u8] = b"hello, world";

#[cfg(not(test))]
#[export_name = "test_pki_verify_sign"]
fn test_pki_verify_sign() -> bool {
    use webpki::EndEntityCert;
    use ring::rand;
    let cert_der = untrusted::Input::from(&pki_data::PKI_RSA_CA_CERT_DER).as_slice_less_safe();
    let cert = EndEntityCert::from(cert_der).unwrap();

    //let key_bytes_der =
    //untrusted::Input::from(&pki_data::PKI_RSA_CA_KEY_DER).as_slice_less_safe();
    //let key_pair: signature::RsaKeyPair = signature::RsaKeyPair::from_der(key_bytes_der).unwrap();

    //let rng = rand::SystemRandom::new();

    //let mut sign = alloc::vec::Vec::new();
    //for i in 0..key_pair.public_modulus_len() {
    //    sign.push(0u8);
    //}
    //key_pair.sign(&signature::RSA_PKCS1_SHA256, &rng, &MESSAGE, &mut sign).unwrap();

    //log::info!("Test - sign: {:x}\n", key_pair.public_modulus_len());
    //for i in 0..key_pair.public_modulus_len() {
    //    log::info!("{:02x} ", sign[i])
    //}
    //log::info!("\n");
 
    //RSA_PSS_SHA256
    if cert.verify_signature(&webpki::RSA_PKCS1_2048_8192_SHA256, &MESSAGE, &SIGNATURE_DATA).is_ok() {
        true
    } else {
        false
    }
}

#[cfg(not(test))]
#[export_name = "test_pki_verify_cert"]
fn test_pki_verify_cert() -> bool {
    static ALL_SIGALGS: &[&webpki::SignatureAlgorithm] = &[
        &webpki::RSA_PKCS1_2048_8192_SHA256,
        &webpki::RSA_PKCS1_3072_8192_SHA384,
    ];

    let ee =  &pki_data::PKI_RSA_END_CERT_DER;
    let inter = &pki_data::PKI_RSA_INTER_CERT_DER;
    let ca = &pki_data::PKI_RSA_CA_CERT_DER;

    let mut anchors = alloc::vec::Vec::new();
    anchors.push(webpki::trust_anchor_util::cert_der_as_trust_anchor(ca).unwrap());
    //let anchors = vec![webpki::trust_anchor_util::cert_der_as_trust_anchor(ca).unwrap()];
    let anchors = webpki::TLSServerTrustAnchors(&anchors);

    let time = webpki::Time::from_seconds_since_unix_epoch(1593482917);
    let cert = webpki::EndEntityCert::from(ee).unwrap();
    
    if cert.verify_is_valid_tls_server_cert(ALL_SIGALGS, &anchors, &[inter], time).is_ok() {
        true
    } else {
        false
    }
}

#[cfg(not(test))]
#[no_mangle]
#[export_name = "main_init"]
fn main_init(_h: efi::Handle, st: *mut efi::SystemTable) {
    unsafe { efi_services::init(_h, st); };
}

#[cfg(not(test))]
#[no_mangle]
#[export_name = "UEFI_Main"]
pub extern fn main(_h: efi::Handle, st: *mut efi::SystemTable) -> efi::Status {
    unsafe { efi_services::init(_h, st); };

    test_pki_verify_sign();
    test_pki_verify_cert();

    efi::Status::SUCCESS
}

